// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Maksim646/tokens/internal/api/definition"
)

// RefreshTokensOKCode is the HTTP code returned for type RefreshTokensOK
const RefreshTokensOKCode int = 200

/*
RefreshTokensOK Successful Tokens Response

swagger:response refreshTokensOK
*/
type RefreshTokensOK struct {

	/*
	  In: Body
	*/
	Payload *models.Tokens `json:"body,omitempty"`
}

// NewRefreshTokensOK creates RefreshTokensOK with default headers values
func NewRefreshTokensOK() *RefreshTokensOK {

	return &RefreshTokensOK{}
}

// WithPayload adds the payload to the refresh tokens o k response
func (o *RefreshTokensOK) WithPayload(payload *models.Tokens) *RefreshTokensOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh tokens o k response
func (o *RefreshTokensOK) SetPayload(payload *models.Tokens) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshTokensOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshTokensBadRequestCode is the HTTP code returned for type RefreshTokensBadRequest
const RefreshTokensBadRequestCode int = 400

/*
RefreshTokensBadRequest Bad request

swagger:response refreshTokensBadRequest
*/
type RefreshTokensBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRefreshTokensBadRequest creates RefreshTokensBadRequest with default headers values
func NewRefreshTokensBadRequest() *RefreshTokensBadRequest {

	return &RefreshTokensBadRequest{}
}

// WithPayload adds the payload to the refresh tokens bad request response
func (o *RefreshTokensBadRequest) WithPayload(payload *models.Error) *RefreshTokensBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh tokens bad request response
func (o *RefreshTokensBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshTokensBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshTokensUnauthorizedCode is the HTTP code returned for type RefreshTokensUnauthorized
const RefreshTokensUnauthorizedCode int = 401

/*
RefreshTokensUnauthorized Unauthorized

swagger:response refreshTokensUnauthorized
*/
type RefreshTokensUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRefreshTokensUnauthorized creates RefreshTokensUnauthorized with default headers values
func NewRefreshTokensUnauthorized() *RefreshTokensUnauthorized {

	return &RefreshTokensUnauthorized{}
}

// WithPayload adds the payload to the refresh tokens unauthorized response
func (o *RefreshTokensUnauthorized) WithPayload(payload *models.Error) *RefreshTokensUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh tokens unauthorized response
func (o *RefreshTokensUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshTokensUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshTokensForbiddenCode is the HTTP code returned for type RefreshTokensForbidden
const RefreshTokensForbiddenCode int = 403

/*
RefreshTokensForbidden Invalid IP or token mismatch

swagger:response refreshTokensForbidden
*/
type RefreshTokensForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRefreshTokensForbidden creates RefreshTokensForbidden with default headers values
func NewRefreshTokensForbidden() *RefreshTokensForbidden {

	return &RefreshTokensForbidden{}
}

// WithPayload adds the payload to the refresh tokens forbidden response
func (o *RefreshTokensForbidden) WithPayload(payload *models.Error) *RefreshTokensForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh tokens forbidden response
func (o *RefreshTokensForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshTokensForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshTokensConflictCode is the HTTP code returned for type RefreshTokensConflict
const RefreshTokensConflictCode int = 409

/*
RefreshTokensConflict Refresh token reuse attempt

swagger:response refreshTokensConflict
*/
type RefreshTokensConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRefreshTokensConflict creates RefreshTokensConflict with default headers values
func NewRefreshTokensConflict() *RefreshTokensConflict {

	return &RefreshTokensConflict{}
}

// WithPayload adds the payload to the refresh tokens conflict response
func (o *RefreshTokensConflict) WithPayload(payload *models.Error) *RefreshTokensConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh tokens conflict response
func (o *RefreshTokensConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshTokensConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshTokensInternalServerErrorCode is the HTTP code returned for type RefreshTokensInternalServerError
const RefreshTokensInternalServerErrorCode int = 500

/*
RefreshTokensInternalServerError Internal server error

swagger:response refreshTokensInternalServerError
*/
type RefreshTokensInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRefreshTokensInternalServerError creates RefreshTokensInternalServerError with default headers values
func NewRefreshTokensInternalServerError() *RefreshTokensInternalServerError {

	return &RefreshTokensInternalServerError{}
}

// WithPayload adds the payload to the refresh tokens internal server error response
func (o *RefreshTokensInternalServerError) WithPayload(payload *models.Error) *RefreshTokensInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh tokens internal server error response
func (o *RefreshTokensInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshTokensInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
