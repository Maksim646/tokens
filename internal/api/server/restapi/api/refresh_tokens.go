// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	models "github.com/Maksim646/tokens/internal/api/definition"
)

// RefreshTokensHandlerFunc turns a function with the right signature into a refresh tokens handler
type RefreshTokensHandlerFunc func(RefreshTokensParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn RefreshTokensHandlerFunc) Handle(params RefreshTokensParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// RefreshTokensHandler interface for that can handle valid refresh tokens params
type RefreshTokensHandler interface {
	Handle(RefreshTokensParams, *models.Principal) middleware.Responder
}

// NewRefreshTokens creates a new http.Handler for the refresh tokens operation
func NewRefreshTokens(ctx *middleware.Context, handler RefreshTokensHandler) *RefreshTokens {
	return &RefreshTokens{Context: ctx, Handler: handler}
}

/*
	RefreshTokens swagger:route POST /auth/refresh refreshTokens

# Update access and refresh tokens

New tokens by active refresh token
*/
type RefreshTokens struct {
	Context *middleware.Context
	Handler RefreshTokensHandler
}

func (o *RefreshTokens) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRefreshTokensParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
