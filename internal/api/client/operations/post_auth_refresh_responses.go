// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/tokens/internal/api/definition"
)

// PostAuthRefreshReader is a Reader for the PostAuthRefresh structure.
type PostAuthRefreshReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthRefreshReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAuthRefreshOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuthRefreshBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuthRefreshUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAuthRefreshForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostAuthRefreshConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAuthRefreshInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/refresh] PostAuthRefresh", response, response.Code())
	}
}

// NewPostAuthRefreshOK creates a PostAuthRefreshOK with default headers values
func NewPostAuthRefreshOK() *PostAuthRefreshOK {
	return &PostAuthRefreshOK{}
}

/*
PostAuthRefreshOK describes a response with status code 200, with default header values.

Successful Tokens Response
*/
type PostAuthRefreshOK struct {
	Payload *models.AccessTokenBody
}

// IsSuccess returns true when this post auth refresh o k response has a 2xx status code
func (o *PostAuthRefreshOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post auth refresh o k response has a 3xx status code
func (o *PostAuthRefreshOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post auth refresh o k response has a 4xx status code
func (o *PostAuthRefreshOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post auth refresh o k response has a 5xx status code
func (o *PostAuthRefreshOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post auth refresh o k response a status code equal to that given
func (o *PostAuthRefreshOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post auth refresh o k response
func (o *PostAuthRefreshOK) Code() int {
	return 200
}

func (o *PostAuthRefreshOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshOK %s", 200, payload)
}

func (o *PostAuthRefreshOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshOK %s", 200, payload)
}

func (o *PostAuthRefreshOK) GetPayload() *models.AccessTokenBody {
	return o.Payload
}

func (o *PostAuthRefreshOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccessTokenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthRefreshBadRequest creates a PostAuthRefreshBadRequest with default headers values
func NewPostAuthRefreshBadRequest() *PostAuthRefreshBadRequest {
	return &PostAuthRefreshBadRequest{}
}

/*
PostAuthRefreshBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostAuthRefreshBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this post auth refresh bad request response has a 2xx status code
func (o *PostAuthRefreshBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post auth refresh bad request response has a 3xx status code
func (o *PostAuthRefreshBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post auth refresh bad request response has a 4xx status code
func (o *PostAuthRefreshBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post auth refresh bad request response has a 5xx status code
func (o *PostAuthRefreshBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post auth refresh bad request response a status code equal to that given
func (o *PostAuthRefreshBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post auth refresh bad request response
func (o *PostAuthRefreshBadRequest) Code() int {
	return 400
}

func (o *PostAuthRefreshBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshBadRequest %s", 400, payload)
}

func (o *PostAuthRefreshBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshBadRequest %s", 400, payload)
}

func (o *PostAuthRefreshBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostAuthRefreshBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthRefreshUnauthorized creates a PostAuthRefreshUnauthorized with default headers values
func NewPostAuthRefreshUnauthorized() *PostAuthRefreshUnauthorized {
	return &PostAuthRefreshUnauthorized{}
}

/*
PostAuthRefreshUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostAuthRefreshUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this post auth refresh unauthorized response has a 2xx status code
func (o *PostAuthRefreshUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post auth refresh unauthorized response has a 3xx status code
func (o *PostAuthRefreshUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post auth refresh unauthorized response has a 4xx status code
func (o *PostAuthRefreshUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post auth refresh unauthorized response has a 5xx status code
func (o *PostAuthRefreshUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post auth refresh unauthorized response a status code equal to that given
func (o *PostAuthRefreshUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post auth refresh unauthorized response
func (o *PostAuthRefreshUnauthorized) Code() int {
	return 401
}

func (o *PostAuthRefreshUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshUnauthorized %s", 401, payload)
}

func (o *PostAuthRefreshUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshUnauthorized %s", 401, payload)
}

func (o *PostAuthRefreshUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostAuthRefreshUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthRefreshForbidden creates a PostAuthRefreshForbidden with default headers values
func NewPostAuthRefreshForbidden() *PostAuthRefreshForbidden {
	return &PostAuthRefreshForbidden{}
}

/*
PostAuthRefreshForbidden describes a response with status code 403, with default header values.

Invalid IP or token mismatch
*/
type PostAuthRefreshForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this post auth refresh forbidden response has a 2xx status code
func (o *PostAuthRefreshForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post auth refresh forbidden response has a 3xx status code
func (o *PostAuthRefreshForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post auth refresh forbidden response has a 4xx status code
func (o *PostAuthRefreshForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post auth refresh forbidden response has a 5xx status code
func (o *PostAuthRefreshForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post auth refresh forbidden response a status code equal to that given
func (o *PostAuthRefreshForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post auth refresh forbidden response
func (o *PostAuthRefreshForbidden) Code() int {
	return 403
}

func (o *PostAuthRefreshForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshForbidden %s", 403, payload)
}

func (o *PostAuthRefreshForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshForbidden %s", 403, payload)
}

func (o *PostAuthRefreshForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostAuthRefreshForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthRefreshConflict creates a PostAuthRefreshConflict with default headers values
func NewPostAuthRefreshConflict() *PostAuthRefreshConflict {
	return &PostAuthRefreshConflict{}
}

/*
PostAuthRefreshConflict describes a response with status code 409, with default header values.

Refresh token reuse attempt
*/
type PostAuthRefreshConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this post auth refresh conflict response has a 2xx status code
func (o *PostAuthRefreshConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post auth refresh conflict response has a 3xx status code
func (o *PostAuthRefreshConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post auth refresh conflict response has a 4xx status code
func (o *PostAuthRefreshConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post auth refresh conflict response has a 5xx status code
func (o *PostAuthRefreshConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post auth refresh conflict response a status code equal to that given
func (o *PostAuthRefreshConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post auth refresh conflict response
func (o *PostAuthRefreshConflict) Code() int {
	return 409
}

func (o *PostAuthRefreshConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshConflict %s", 409, payload)
}

func (o *PostAuthRefreshConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshConflict %s", 409, payload)
}

func (o *PostAuthRefreshConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostAuthRefreshConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthRefreshInternalServerError creates a PostAuthRefreshInternalServerError with default headers values
func NewPostAuthRefreshInternalServerError() *PostAuthRefreshInternalServerError {
	return &PostAuthRefreshInternalServerError{}
}

/*
PostAuthRefreshInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PostAuthRefreshInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this post auth refresh internal server error response has a 2xx status code
func (o *PostAuthRefreshInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post auth refresh internal server error response has a 3xx status code
func (o *PostAuthRefreshInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post auth refresh internal server error response has a 4xx status code
func (o *PostAuthRefreshInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post auth refresh internal server error response has a 5xx status code
func (o *PostAuthRefreshInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post auth refresh internal server error response a status code equal to that given
func (o *PostAuthRefreshInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post auth refresh internal server error response
func (o *PostAuthRefreshInternalServerError) Code() int {
	return 500
}

func (o *PostAuthRefreshInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshInternalServerError %s", 500, payload)
}

func (o *PostAuthRefreshInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] postAuthRefreshInternalServerError %s", 500, payload)
}

func (o *PostAuthRefreshInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostAuthRefreshInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
