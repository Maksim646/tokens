// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/tokens/internal/api/definition"
)

// NewRefreshTokensParams creates a new RefreshTokensParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRefreshTokensParams() *RefreshTokensParams {
	return &RefreshTokensParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRefreshTokensParamsWithTimeout creates a new RefreshTokensParams object
// with the ability to set a timeout on a request.
func NewRefreshTokensParamsWithTimeout(timeout time.Duration) *RefreshTokensParams {
	return &RefreshTokensParams{
		timeout: timeout,
	}
}

// NewRefreshTokensParamsWithContext creates a new RefreshTokensParams object
// with the ability to set a context for a request.
func NewRefreshTokensParamsWithContext(ctx context.Context) *RefreshTokensParams {
	return &RefreshTokensParams{
		Context: ctx,
	}
}

// NewRefreshTokensParamsWithHTTPClient creates a new RefreshTokensParams object
// with the ability to set a custom HTTPClient for a request.
func NewRefreshTokensParamsWithHTTPClient(client *http.Client) *RefreshTokensParams {
	return &RefreshTokensParams{
		HTTPClient: client,
	}
}

/*
RefreshTokensParams contains all the parameters to send to the API endpoint

	for the refresh tokens operation.

	Typically these are written to a http.Request.
*/
type RefreshTokensParams struct {

	/* Tokens.

	   Refresh Token Body
	*/
	Tokens *models.Tokens

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the refresh tokens params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RefreshTokensParams) WithDefaults() *RefreshTokensParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the refresh tokens params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RefreshTokensParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the refresh tokens params
func (o *RefreshTokensParams) WithTimeout(timeout time.Duration) *RefreshTokensParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the refresh tokens params
func (o *RefreshTokensParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the refresh tokens params
func (o *RefreshTokensParams) WithContext(ctx context.Context) *RefreshTokensParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the refresh tokens params
func (o *RefreshTokensParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the refresh tokens params
func (o *RefreshTokensParams) WithHTTPClient(client *http.Client) *RefreshTokensParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the refresh tokens params
func (o *RefreshTokensParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTokens adds the tokens to the refresh tokens params
func (o *RefreshTokensParams) WithTokens(tokens *models.Tokens) *RefreshTokensParams {
	o.SetTokens(tokens)
	return o
}

// SetTokens adds the tokens to the refresh tokens params
func (o *RefreshTokensParams) SetTokens(tokens *models.Tokens) {
	o.Tokens = tokens
}

// WriteToRequest writes these params to a swagger request
func (o *RefreshTokensParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Tokens != nil {
		if err := r.SetBodyParam(o.Tokens); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
