// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/tokens/internal/api/definition"
)

// RefreshTokensReader is a Reader for the RefreshTokens structure.
type RefreshTokensReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshTokensReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshTokensOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRefreshTokensBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRefreshTokensUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRefreshTokensForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRefreshTokensConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRefreshTokensInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/refresh] RefreshTokens", response, response.Code())
	}
}

// NewRefreshTokensOK creates a RefreshTokensOK with default headers values
func NewRefreshTokensOK() *RefreshTokensOK {
	return &RefreshTokensOK{}
}

/*
RefreshTokensOK describes a response with status code 200, with default header values.

Successful Tokens Response
*/
type RefreshTokensOK struct {
	Payload *models.Tokens
}

// IsSuccess returns true when this refresh tokens o k response has a 2xx status code
func (o *RefreshTokensOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh tokens o k response has a 3xx status code
func (o *RefreshTokensOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh tokens o k response has a 4xx status code
func (o *RefreshTokensOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh tokens o k response has a 5xx status code
func (o *RefreshTokensOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh tokens o k response a status code equal to that given
func (o *RefreshTokensOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh tokens o k response
func (o *RefreshTokensOK) Code() int {
	return 200
}

func (o *RefreshTokensOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensOK %s", 200, payload)
}

func (o *RefreshTokensOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensOK %s", 200, payload)
}

func (o *RefreshTokensOK) GetPayload() *models.Tokens {
	return o.Payload
}

func (o *RefreshTokensOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Tokens)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshTokensBadRequest creates a RefreshTokensBadRequest with default headers values
func NewRefreshTokensBadRequest() *RefreshTokensBadRequest {
	return &RefreshTokensBadRequest{}
}

/*
RefreshTokensBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RefreshTokensBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this refresh tokens bad request response has a 2xx status code
func (o *RefreshTokensBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh tokens bad request response has a 3xx status code
func (o *RefreshTokensBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh tokens bad request response has a 4xx status code
func (o *RefreshTokensBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh tokens bad request response has a 5xx status code
func (o *RefreshTokensBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh tokens bad request response a status code equal to that given
func (o *RefreshTokensBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the refresh tokens bad request response
func (o *RefreshTokensBadRequest) Code() int {
	return 400
}

func (o *RefreshTokensBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensBadRequest %s", 400, payload)
}

func (o *RefreshTokensBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensBadRequest %s", 400, payload)
}

func (o *RefreshTokensBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RefreshTokensBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshTokensUnauthorized creates a RefreshTokensUnauthorized with default headers values
func NewRefreshTokensUnauthorized() *RefreshTokensUnauthorized {
	return &RefreshTokensUnauthorized{}
}

/*
RefreshTokensUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RefreshTokensUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this refresh tokens unauthorized response has a 2xx status code
func (o *RefreshTokensUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh tokens unauthorized response has a 3xx status code
func (o *RefreshTokensUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh tokens unauthorized response has a 4xx status code
func (o *RefreshTokensUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh tokens unauthorized response has a 5xx status code
func (o *RefreshTokensUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh tokens unauthorized response a status code equal to that given
func (o *RefreshTokensUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the refresh tokens unauthorized response
func (o *RefreshTokensUnauthorized) Code() int {
	return 401
}

func (o *RefreshTokensUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensUnauthorized %s", 401, payload)
}

func (o *RefreshTokensUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensUnauthorized %s", 401, payload)
}

func (o *RefreshTokensUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RefreshTokensUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshTokensForbidden creates a RefreshTokensForbidden with default headers values
func NewRefreshTokensForbidden() *RefreshTokensForbidden {
	return &RefreshTokensForbidden{}
}

/*
RefreshTokensForbidden describes a response with status code 403, with default header values.

Invalid IP or token mismatch
*/
type RefreshTokensForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this refresh tokens forbidden response has a 2xx status code
func (o *RefreshTokensForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh tokens forbidden response has a 3xx status code
func (o *RefreshTokensForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh tokens forbidden response has a 4xx status code
func (o *RefreshTokensForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh tokens forbidden response has a 5xx status code
func (o *RefreshTokensForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh tokens forbidden response a status code equal to that given
func (o *RefreshTokensForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the refresh tokens forbidden response
func (o *RefreshTokensForbidden) Code() int {
	return 403
}

func (o *RefreshTokensForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensForbidden %s", 403, payload)
}

func (o *RefreshTokensForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensForbidden %s", 403, payload)
}

func (o *RefreshTokensForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RefreshTokensForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshTokensConflict creates a RefreshTokensConflict with default headers values
func NewRefreshTokensConflict() *RefreshTokensConflict {
	return &RefreshTokensConflict{}
}

/*
RefreshTokensConflict describes a response with status code 409, with default header values.

Refresh token reuse attempt
*/
type RefreshTokensConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this refresh tokens conflict response has a 2xx status code
func (o *RefreshTokensConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh tokens conflict response has a 3xx status code
func (o *RefreshTokensConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh tokens conflict response has a 4xx status code
func (o *RefreshTokensConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh tokens conflict response has a 5xx status code
func (o *RefreshTokensConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh tokens conflict response a status code equal to that given
func (o *RefreshTokensConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the refresh tokens conflict response
func (o *RefreshTokensConflict) Code() int {
	return 409
}

func (o *RefreshTokensConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensConflict %s", 409, payload)
}

func (o *RefreshTokensConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensConflict %s", 409, payload)
}

func (o *RefreshTokensConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *RefreshTokensConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshTokensInternalServerError creates a RefreshTokensInternalServerError with default headers values
func NewRefreshTokensInternalServerError() *RefreshTokensInternalServerError {
	return &RefreshTokensInternalServerError{}
}

/*
RefreshTokensInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RefreshTokensInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this refresh tokens internal server error response has a 2xx status code
func (o *RefreshTokensInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh tokens internal server error response has a 3xx status code
func (o *RefreshTokensInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh tokens internal server error response has a 4xx status code
func (o *RefreshTokensInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh tokens internal server error response has a 5xx status code
func (o *RefreshTokensInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this refresh tokens internal server error response a status code equal to that given
func (o *RefreshTokensInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the refresh tokens internal server error response
func (o *RefreshTokensInternalServerError) Code() int {
	return 500
}

func (o *RefreshTokensInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensInternalServerError %s", 500, payload)
}

func (o *RefreshTokensInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/refresh][%d] refreshTokensInternalServerError %s", 500, payload)
}

func (o *RefreshTokensInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RefreshTokensInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
